name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository to GitHub runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

#      # Login to Docker Hub
#      - name: Docker Hub Login
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}

#      # Build and push Docker image
#      - name: Build & Push Docker Image
#        run: |
#          IMAGE_NAME=myapp
#          docker build -t $IMAGE_NAME:latest .
#          docker tag $IMAGE_NAME:latest ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest

      # Deploy to remote server
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            echo "Cloning / ensuring app dir..."
            APP_DIR="$HOME/myapp"
            REPO_URL="https://github.com/dinukamalitha/VRL_Institute.git"
            
            # Case 1: ~/myapp exists and is the repo → update it
            if [ -d "$APP_DIR/.git" ]; then
            cd "$APP_DIR"
            git fetch --all
            git reset --hard origin/main
            
            # Case 2: ~/myapp exists but is NOT a git repo → recreate it cleanly
            elif [ -d "$APP_DIR" ]; then
            rm -rf "$APP_DIR"
            git clone "$REPO_URL" "$APP_DIR"
            cd "$APP_DIR"
            
            # Case 3: ~/myapp does not exist → create by cloning into it
            else
            git clone "$REPO_URL" "$APP_DIR"
            cd "$APP_DIR"
            fi
  
            echo "Writing environment variables..."
            cat <<EOF > .env
            NODE_ENV=${{ secrets.NODE_ENV }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            PORT=${{secrets.PORT}}
            EOF

            echo "Bringing up Docker Compose..."
            docker compose down
            docker compose up -d --build
